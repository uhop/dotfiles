# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

VISUAL=yes
[ -z "$PS1" ] && VISUAL=

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
    xterm-256color) color_prompt=yes;;
    screen-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ "$VISUAL" = yes ]; then
	if [ -n "$force_color_prompt" ]; then
	    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	        # We have color support; assume it's compliant with Ecma-48
	        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	        # a case would tend to support setf rather than setaf.)
	        color_prompt=yes
	    else
	        color_prompt=
	    fi
	fi
	if [ "$color_prompt" = yes ]; then
	    PS1='\[\033[01;33m\]\w\[\033[00m\] \$ '
	else
	    PS1='\w \$ '
	fi
fi

unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)";;
    Darwin*)
      if [ -f /opt/homebrew/bin/brew ]; then
      	eval "$(/opt/homebrew/bin/brew shellenv)"
      elif [ -f /usr/local/bin/brew ]; then
      	eval "$(/usr/local/bin/brew shellenv)"
      fi
    	;;
esac
unset unameOut

if [ "$VISUAL" = yes ]; then
	BGP="$(brew --prefix bash-git-prompt)"
	if [ -f "$BGP/share/gitprompt.sh" ]; then
	    #GIT_PROMPT_ONLY_IN_REPO=1
	    #GIT_PROMPT_FETCH_REMOTE_STATUS=0   # uncomment to avoid fetching remote status
	    #GIT_PROMPT_THEME=Default
	    #GIT_PROMPT_THEME=Single_line_Solarized
	    __GIT_PROMPT_DIR="$BGP/share"
	    GIT_PROMPT_THEME=Single_line
	    source "$BGP/share/gitprompt.sh"
	fi
	unset BGP
fi

unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
if [ "$VISUAL" = yes ]; then
	case "$TERM" in
	xterm*|rxvt*)
	    PS1="\[\e]0;\u@\h: \w\a\]$PS1"
	    ;;
	*)
	    ;;
	esac
fi

# set PATH so it includes user's private bin if it exists
[ -d "$HOME/bin" ] && PATH="$HOME/bin:$PATH" || true
[ -d "$HOME/.local/bin" ] && PATH="$HOME/.local/bin:$PATH" || true

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

[ -f ~/.bash_aliases ] && . ~/.bash_aliases || true

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
[ -f /etc/bash_completion ] && ! shopt -oq posix && . /etc/bash_completion || true

BP="$(brew --prefix)"
if [ -f "$BP/etc/profile.d/bash_completion.sh" ]; then
  . "$BP/etc/profile.d/bash_completion.sh"
else
  for COMPLETION in "$BP/etc/bash_completion.d/"*
  do
    [ -f "${COMPLETION}" ] && . "${COMPLETION}"
  done
fi
unset BP

# NVM for node.js
BPN="$(brew --prefix nvm)"
if [ -f "$BPN/nvm.sh" ]; then
  export NVM_DIR="$HOME/.nvm"
  . "$BPN/nvm.sh"
  # nvm use stable
  if [ -s "$BPN/etc/bash_completion.d/nvm" ]; then
    . "$BPN/etc/bash_completion.d/nvm"
  fi
fi
unset BPN

# pyenv
if command -v pyenv &> /dev/null; then
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$(pyenv root)/shims:${PATH}"
  eval "$(pyenv init -)"
fi

# bun
if [ -f "$HOME/.bun/bin/bun" ]; then
  export BUN_INSTALL="$HOME/.bun"
  export PATH=$BUN_INSTALL/bin:$PATH
fi

command -v xc &> /dev/null && complete -C "$(brew --prefix xc)" xc || true
command -v zoxide &> /dev/null && eval "$(zoxide init bash)" || true
test -e ~/.config/broot/launcher/bash/br && . ~/.config/broot/launcher/bash/br || true

if command -v fzf &> /dev/null; then
	eval "$(fzf --bash)"
fi

if [[ $TERM_PROGRAM != "WarpTerminal" ]]; then
  test -e ~/.iterm2_shell_integration.bash && . ~/.iterm2_shell_integration.bash || true
fi

if [ "$VISUAL" = yes ]; then
	# [ "$SHLVL" == "1" ] && command -v fastfetch &> /dev/null && fastfetch || true
	if command -v fastfetch &> /dev/null; then
	  SPN=$(ps -p $PPID | awk '{print substr($0, index($0, $4))}' | tail -1)
	  if [ "$SHLVL" == "2" ] && [[ "$SPN" == *tmux* ]] || [ "$SHLVL" == "1" ]; then
	  	fastfetch
	  fi
	  unset SPN
	fi
fi

unset VISUAL

export EDITOR=micro
export BASH_SILENCE_DEPRECATION_WARNING=1
export FORCE_COLOR=3
export GITHUB_USERNAME=uhop

# dedupe path (based on https://www.linuxjournal.com/content/removing-duplicate-path-entries)
export PATH=$(echo -n "$PATH" | awk -v RS=: '!($0 in a) {a[$0]; printf("%s%s", length(a) > 1 ? ":" : "", $0)}')
