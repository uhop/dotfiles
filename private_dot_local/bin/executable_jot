#!/usr/bin/env bash

set -o errexit -o pipefail -o nounset -o noclobber
shopt -s expand_aliases

. ~/.local/share/libs/scripts/ansi-style.sh
. ~/.local/share/libs/scripts/args.sh
. ~/.local/share/libs/scripts/args-version.sh
. ~/.local/share/libs/scripts/args-help.sh

script_dir="$(dirname "$(readlink -f "$0")")"
script_name=$(basename "$0")

args::program "$script_name" "1.0" "Jot notes keeping them in S3"
# args_program_usage="$(box::make "usage example 1" "usage example 2" "usage example 3")"
# args_program_header="Some fancyful\ndescription"
# args_program_footer="Some footer"
# args_program_help_style="list"
args_program_required_command="no"

args::option "edit, e" "Edit file" "file_name"
args::option "list, l" "List available files"

args::option "-v, --version" "Show version"
args::option "-h, --help" "Show help"

args::parse "$@"
eval set -- "${args_cleaned}"

ERROR="$BOLD$BRIGHT_WHITE$BG_RED"

TMPDIR=$(mktemp -d)
trap 'rm -rf -- "$TMPDIR"' EXIT

if [ -z "$JOT_AWS_BUCKET" ]; then
  ansi::err "${ERROR}No AWS bucket name is specified by \"${REVERSE}JOT_AWS_BUCKET${RESET_REVERSE}\". Please set it to an accessible bucket for notes.${RESET_ALL}"
  exit 1
fi

ansi::out "Using AWS bucket: ${BOLD}${JOT_AWS_BUCKET}${RESET_BOLD}"
ansi::out "Testing access to the bucket..."
if ! aws s3api head-bucket --bucket "$JOT_AWS_BUCKET" &>/dev/null; then
  ansi::err "${ERROR}AWS bucket \"${REVERSE}$JOT_AWS_BUCKET${RESET_REVERSE}\" is not accessible or does not exist. Please verify.${RESET_ALL}"
  exit 1
fi

if [ -z "${1:-}" ] || [[ "$args_command" == "list" ]]; then
  echo
  ansi::out "Listing available files:"
  echo
  aws s3 ls "$JOT_AWS_BUCKET"
  if [ $? -ne 0 ]; then
    ansi::err "${ERROR}The previous command failed: make sure that the bucket ${REVERSE}${JOT_AWS_BUCKET}${RESET_REVERSE} exists and accessible.${RESET_ALL}"
    exit 1
  fi
  echo
  ansi::out "Use: jot ${ITALIC}filename${RESET_ALL}"
  exit 0
fi

if [[ "$args_command" == "edit" ]]; then
  shift
fi

asset="$1"

FOUND=yes
ansi::out "Checking access to the file..."
if ! aws s3api head-object --bucket "$JOT_AWS_BUCKET" --key "$asset" &>/dev/null; then
  FOUND=no
fi

AGE_KEY=${JOT_AGE_KEY:-~/.ssh/age.key}
SSH_PUB=${JOT_SSH_PUB:-~/.ssh/id_rsa.pub}
SSH_PRV=${JOT_SSH_PRV:-~/.ssh/id_rsa}

do_command() {
  local command="$1"
  local file_ext="$2"
  local file_short="${3:-}"
  local file_long="$file_short"."$2"

  if [[ "$FOUND" == "no" ]] && [[ "$command" == "d" ]]; then
    rm "$TMPDIR/$file_long"
    touch "$TMPDIR/$file_short"
    return 0
  fi

  case "$file_ext" in
    "age")
      if [[ "$command" == "d" ]]; then
        # decode
        if [ -f "$AGE_KEY" ]; then
          ansi::out "Decrypting with age key..."
          age --decrypt -i "$AGE_KEY" -o "$TMPDIR/$file_short" "$TMPDIR/$file_long"
          rm "$TMPDIR/$file_long"
        elif [ -f "$SSH_PRV" ]; then
          ansi::out "Decrypting with ssh private key..."
          age --decrypt -i "$SSH_PRV" -o "$TMPDIR/$file_short" "$TMPDIR/$file_long"
          rm "$TMPDIR/$file_long"
        else
          ansi::err "${ERROR}Keys not found: ${REVERSE}${AGE_KEY}${RESET_REVERSE}, ${REVERSE}${SSH_PRV}${RESET_REVERSE}${RESET_ALL}"
          return 1
        fi
      elif [[ "$command" == "e" ]]; then
        # encode
        if [ -f "$AGE_KEY" ]; then
          ansi::out "Encrypting with age key..."
          age --encrypt -i "$AGE_KEY" -o "$TMPDIR/$file_long" "$TMPDIR/$file_short"
          rm "$TMPDIR/$file_short"
        elif [ -f "$SSH_PUB" ]; then
          ansi::out "Encrypting with ssh public key..."
          age --encrypt -R "$SSH_PUB" -o "$TMPDIR/$file_long" "$TMPDIR/$file_short"
          rm "$TMPDIR/$file_short"
        else
          ansi::err "${ERROR}Keys not found: ${REVERSE}${AGE_KEY}${RESET_REVERSE}, ${REVERSE}${SSH_PUB}${RESET_REVERSE}${RESET_ALL}"
          return 1
        fi
      fi
      ;;
    "br")
      if [[ "$command" == "d" ]]; then
        # decode
        ansi::out "Decoding with brotli..."
        brotli -d --rm "$TMPDIR/$file_long"
      elif [[ "$command" == "e" ]]; then
        # encode
        ansi::out "Encoding with brotli..."
        brotli -Z --rm "$TMPDIR/$file_short"
      fi
      ;;
    "bz2")
      if [[ "$command" == "d" ]]; then
        # decode
        ansi::out "Decoding with bunzip2..."
        bunzip2 "$TMPDIR/$file_long"
      elif [[ "$command" == "e" ]]; then
        # encode
        ansi::out "Encoding with bzip2..."
        bzip2 -z --best "$TMPDIR/$file_short"
      fi
      ;;
    "gz")
      if [[ "$command" == "d" ]]; then
        # decode
        ansi::out "Decoding with gunzip..."
        gunzip "$TMPDIR/$file_long"
      elif [[ "$command" == "e" ]]; then
        # encode
        ansi::out "Encoding with gzip..."
        gzip -9 "$TMPDIR/$file_short"
      fi
      ;;
    "xz")
      if [[ "$command" == "d" ]]; then
        # decode
        ansi::out "Decoding with xz..."
        xz -d "$TMPDIR/$file_long"
      elif [[ "$command" == "e" ]]; then
        # encode
        ansi::out "Encoding with xz..."
        xz -z -e -9 "$TMPDIR/$file_short"
      fi
      ;;
    "zst")
      if [[ "$command" == "d" ]]; then
        # decode
        ansi::out "Decoding with zstd..."
        unzstd --rm "$TMPDIR/$file_long"
      elif [[ "$command" == "e" ]]; then
        # encode
        ansi::out "Encoding with zstd..."
        zstd --ultra --rm "$TMPDIR/$file_short"
      fi
      ;;
    *)
      return 1
      ;;
  esac
  return 0
}

if [[ "$FOUND" == "yes" ]]; then
  ansi::out "Downloading ${BOLD}${asset}${RESET_BOLD} from S3..."
  aws s3 cp "s3://$JOT_AWS_BUCKET/$asset" "$TMPDIR/$asset" --quiet
else
  touch "$TMPDIR/$asset"
fi

file_name="$asset"
extensions=()

while true; do
  file_ext="${file_name##*.}"
  file_short="${file_name%.*}"
  if ! do_command t "$file_ext"; then
    break
  fi
  do_command d "$file_ext" "$file_short"
  file_name="$file_short"
  extensions+=("$file_ext")
done

editor="${VISUAL:-$EDITOR}"

ansi::out "Opening ${BOLD}${asset}${RESET_BOLD} in ${BOLD}${editor}${RESET_BOLD}..."
"$editor" "$TMPDIR/$file_name"

# Get the index of the last element
last_index=$(( ${#extensions[@]} - 1 ))

# Iterate from the last index down to 0
for (( i = $last_index; i >= 0; --i )); do
  do_command e "${extensions[$i]}" "$file_name"
  file_name+=".${extensions[$i]}"
done

ansi::out "Uploading ${BOLD}${asset}${RESET_BOLD} to S3..."
aws s3 cp "$TMPDIR/$asset" "s3://$JOT_AWS_BUCKET/$asset" --quiet
