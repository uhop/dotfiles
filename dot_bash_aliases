# use doas instead of sudo by default
command -v doas &>/dev/null && [ -f /etc/doas.conf ] && alias sudo='doas' || true

# echo the first argument and run
echoRun() {
  echo -e "\033[36m$@\033[0m"
  eval "$@"
}

# listing files (better `ls`)

alias l='eza'

alias ls='eza --grid --color auto --icons --sort=type'
alias ll='eza --long --color always --icons --sort=type'
alias la='eza --grid --all --color auto --icons --sort=type'
alias lla='eza --long --all --color auto --icons --sort=type'
alias ltr='eza -l -t modified -r'

join_path() {
  local result="$1"
  local component

  # Iterate through remaining arguments (path components)
  shift
  for component in "$@"; do
    # If result is empty, assign component to result
    if [[ -z "$result" ]]; then
      result="$component"
    # If component is not empty, add a slash and the component
    elif [[ -n "$component" ]]; then
      # Remove trailing slash from result if present
      result="${result%/}"
      result="$result/$component"
    fi
  done
  echo "$result"
}

l.() {
  if [ -n "$1" ] && [ ! -d "$1" ]; then
    echo "Use: l. [dir]"
    return 1
  fi
  l -d $(join_path "$1" ".*")
}

# traversing directories (better `cd`) AKA `z`

## get rid of command not found ##
alias cd..='z ..'
alias z..='z ..'
## a quick way to get out of current directory ##
alias ..='z ..'
alias ...='z ../../'
alias ....='z ../../../'
alias .....='z ../../../../'
alias .4='z ../../../../'
alias .5='z ../../../../../'
alias ~='z ~'
alias -- -='z -'

up() { z $(eval printf '../'%.0s {1..$1}); }

# cd + ls
zl() {
  local dir="$1"
  local dir="${dir:=$HOME}"
  z "$dir" >/dev/null && l
}

## Create parent directories on demand
alias mkdir='command mkdir -pv'

## mkdir + cd
mkcd() { mkdir -pv "$@" && z "$@"; }
alias mkz="mkcd"

# file operations

## Add safety nets
## do not delete / or prompt if deleting more than 3 files at a time
alias rm='command rm -I --preserve-root'
if [[ $OSTYPE == 'darwin'* ]]; then
  alias rm='command rm -I'
fi

## confirmation #
alias mv='command mv -iv'
alias cp='command cp -iv'
alias ln='command ln -i'

## Parenting changing perms on / #
if [[ $OSTYPE != 'darwin'* ]]; then
  alias chown='command chown --preserve-root'
  alias chmod='command chmod --preserve-root'
  alias chgrp='command chgrp --preserve-root'
fi

# `rsync`-based file transfers (better `cp` and `mv`) with a progress bar

if command -v rsync &>/dev/null; then
  alias cpg="rsync -ah --info=progress2 --no-inc-recursive --stats"
  alias mvg="rsync -ah --info=progress2 --no-inc-recursive --stats --remove-source-files"
  alias rcp="rsync -av --progress -h"
  alias rmv="rsync -av --progress -h --remove-source-files"
  alias rup="rsync -avu --progress -h"
  alias rsy="rsync -avu --delete --progress -h"
fi

# Resume wget by default
alias wget='command wget -c'

# git aliases

__get_default_git_branch() {
  git remote show origin | sed -n '/HEAD branch/s/.*: //p'
}

alias gst='f() { echoRun "git status $@"; unset -f f; }; f'
__git_complete gst _git_status
alias gco='f() { echoRun "git checkout $@"; unset -f f; }; f'
__git_complete gco _git_checkout
alias gcob='f() { echoRun "git checkout -b $@"; unset -f f; }; f'
__git_complete gcob _git_checkout
alias gcm='f() { echoRun "git commit $@"; unset -f f; }; f'
__git_complete gcm _git_commit
alias gbr='f() { echoRun "git branch $@"; unset -f f; }; f'
__git_complete gbr _git_branch
alias gre='f() { echoRun "git restore $@"; unset -f f; }; f'
__git_complete gre _git_restore
alias gpull='f() { echoRun "git pull $@"; unset -f f; }; f'
__git_complete gpull _git_pull
alias gpush='f() { echoRun "git push $@"; unset -f f; }; f'
__git_complete gpush _git_push

alias gsw='f() { if [[ "$#" -eq 0 ]]; then echoRun "git switch $(__get_default_git_branch)"; else echoRun "git switch $@"; fi; unset -f f; }; f'
__git_complete gsw _git_switch


alias gls='f() { echoRun "git ls $@"; unset -f f; }; f'
alias gll='f() { echoRun "git ll $@"; unset -f f; }; f'

alias glsf='f() { echoRun "git lsf $@"; unset -f f; }; f'

if command -v gitk &> /dev/null; then alias gk='gitk --all'; fi

## Colorize output for ease of use (good for log files)
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias diff='diff --color=auto'

## Start calculator with math support
alias bc='command bc -l'

## Generate sha1 digest
alias sha1='command openssl sha1'

## Make mount command output pretty and human readable format
alias mount='command mount | command column -t'

## Command short cuts to save time
alias h='command history'
alias j='command jobs -l'

## set some other defaults
alias df='command df -kh'
alias dd='command dd status=progress'
alias free='free -m'
alias env='command env | sort'
alias path='command echo -e ${PATH//:/\\n}'

alias mic='micro'
alias lzd='lazydocker'
alias lzg='lazygit'

# Better replacements

if command -v bat &> /dev/null; then
  alias cat='bat'
elif command -v batcat &> /dev/null; then
  alias cat='batcat'
fi
alias ping='sudo prettyping --nolegend'
alias top="sudo htop"
alias du="ncdu --color dark -rr -x --exclude .git --exclude node_modules"
alias help='tldr'

# System rebooting

if command -v systemctl &> /dev/null; then
  alias poweroff="sudo systemctl poweroff"
  alias reboot="sudo systemctl reboot"
elif command -v shutdown &>/dev/null; then
  alias poweroff="sudo shutdown -h now"
  alias reboot="sudo shutdown -r now"
fi
if type -t poweroff &>/dev/null; then
  alias shutdown=poweroff
  alias poff=poweroff
fi

# copied from https://www.reddit.com/r/linux/comments/c85me2/useful_aliases_that_i_have_created/

alias oports='sudo lsof -i -P -n | grep -i listen'
if [[ $OSTYPE != 'darwin'* ]]; then
  alias gimme='sudo chown $USER:$USER'
  alias oports2='sudo ss -tnlp'
fi

# copied from https://www.reddit.com/r/linuxquestions/comments/13c6r2j/favorite_aliases/

[[ $OSTYPE != 'darwin'* ]] && alias dirty='watch -n1 "cat /proc/meminfo | grep Dirty"'

# copied from https://www.reddit.com/r/linuxquestions/comments/16tgbh9/what_are_your_favorite_aliases_to_use/

alias duf="duf -only local,fuse"

nowrap() {
    # this is a function so it can have params
    # positive params set starting column relative to "1"
    # negative params set end column relative to $COLUMNS
    # last of each gets used. anything not matching is ignored
    #
    # defaults:
    inset=1
    backset=0
    while [ -n "$1" ] ; do
        case $1 in
            -*)     backset=$1  ;;
            *)      inset=$1    ;;
        esac
        shift
    done
    cut -c $inset-$(($COLUMNS+$inset+$backset-1))
}

# exclude useless directories
alias tre='tree -I "*__pycache__|venv|*static|node_modules|.venv|.git|env|.env|.idea|.vscode|.fleet|CMakeFiles"'
alias gre='grep -r --exclude-dir={node_modules,venv,out,.git,.idea,.metadata,dist,build}'

# copied from https://github.com/Heaust-ops/aliases/blob/main/.bash_aliases

extract () { # usage: extract <file>
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *.deb)       ar x $1      ;;
      *.tar.xz)    tar xf $1    ;;
      *.tar.zst)   unzstd $1    ;;
      *)           echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# TODO: redo the optimization with better utilities
imageop () { # usage: imageop <file> <options>
  if [ -f $1 ] ; then
    case $1 in
      *.jpg)   jpegoptim $1 "${@:2}";;
      *.jpeg)  jpegoptim $1 "${@:2}";;
      *.png)   optipng $1 "${@:2}";;
      *)       echo "'$1' cannot be optimised via imageoptim()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

## get top process eating memory
if [[ $OSTYPE != 'darwin'* ]]; then
  alias psmem='ps auxf | sort -nr -k 4'
  alias psm10='psmem | head -10'
fi

# copied from https://www.reddit.com/r/linux/comments/fn9iqf/your_cli_alias_commands/

if [[ $OSTYPE == 'darwin'* ]]; then
  alias psr="command ps -eo pid,ppid,command,%mem,%cpu -r | head" # list top 10 cpu-intensive processes
  alias psm="command ps -eo pid,ppid,command,%mem,%cpu -m | head" # list top 10 cpu-intensive processes
else
  alias pse="command ps -e --forest" # list processes as a tree
  alias psr="command ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head" # list top 10 cpu-intensive processes
  alias psm="command ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head" # list top 10 cpu-intensive processes
fi
alias psg="command ps aux | grep -v grep | grep -i -e VSZ -e" # search for a running process. example: psg firefox
alias pst="command ps -eo pid,comm,lstart,etimes,time,args"

# My custom commands

# no-globbing mode for bash functions, thanks to http://blog.edwards-research.com/2011/05/preventing-globbing/

noGlobOff() {
    local CMD="$1"
    shift
    $CMD "$@"
    set +f
}

alias noGlob='set -f; noGlobOff'

# Quick context find

implWhere() {
    if [ -z "$1" ]; then
        echo 'where "Context" [[Path/]WildcardSpec]'
    else
        local IN=""
        local WSPEC="${2##*/}"
        [ "$WSPEC" != "$2" ] && IN="${2%/*}"

        [ -z "$IN" ] && IN="."
        [ -z "$WSPEC" ] && WSPEC="*"

        find "$IN" -type f -name "$WSPEC" -exec grep --color=auto -EHn "$1" {} \;
    fi
}

alias where='noGlob implWhere'

# upsearch

upfind() {
  local last_dir="/"
  if [[ "$1" == "-h" ]]; then
    shift
    last_dir="$(realpath "$HOME")"
  fi

  local dir="$PWD"
  while true; do
    command find "$dir" -maxdepth 1 "$@"
    [[ "$dir" == "$last_dir" ]] && break
    [[ "$dir" == "/" ]] && break
    dir="$(realpath "${dir}/..")"
  done
}

upfd() {
  local last_dir="/"
  if [[ "$1" == "-h" ]]; then
    shift
    last_dir="$(realpath "$HOME")"
  fi

  local dir="$PWD"
  while true; do
    command fd --max-depth 1 "$@" "$dir"
    [[ "$dir" == "$last_dir" ]] && break
    [[ "$dir" == "/" ]] && break
    dir="$(realpath "${dir}/..")"
  done
}

alias upsearch='noGlob upfd -gH'

# ssh helpers

ssht() {
  local session_name="$2"
  local session_name="${session_name:=ssh_tmux}"
  local TMUX="(command -v tmux &> /dev/null && tmux new -As $session_name)"
  ssh -t "$1" "$TMUX || bash"
}

mosht() {
  local session_name="$2"
  local session_name="${session_name:=ssh_tmux}"
  local TMUX="tmux new -As $session_name"
  mosh "$1" -- $TMUX
}

ett() {
  local session_name="$2"
  local session_name="${session_name:=ssh_tmux}"
  local TMUX="(command -v tmux &> /dev/null && tmux new -As $session_name)"
  et "$1" -c "$TMUX || bash"
}

## kitten ssh helpers

alias kssh="kitten ssh"

kssht() {
  local session_name="$2"
  local session_name="${session_name:=ssh_tmux}"
  local TMUX="(command -v tmux &> /dev/null && tmux new -As $session_name)"
  kitten ssh -t "$1" "$TMUX || bash"
}
