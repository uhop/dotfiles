# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
    xterm-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='\[\033[01;33m\]\w\[\033[00m\] \$ '
else
    PS1='\w \$ '
fi

unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)";;
    Darwin*)
      if [ -f /opt/homebrew/bin/brew ]; then
      	eval "$(/opt/homebrew/bin/brew shellenv)"
      elif [ -f /usr/local/bin/brew ]; then
      	eval "$(/usr/local/bin/brew shellenv)"
      fi
    	;;
esac
unset unameOut

BGP="$(brew --prefix bash-git-prompt)"
if [ -f "$BGP/share/gitprompt.sh" ]; then
    #GIT_PROMPT_ONLY_IN_REPO=1
    #GIT_PROMPT_FETCH_REMOTE_STATUS=0   # uncomment to avoid fetching remote status
    #GIT_PROMPT_THEME=Default
    #GIT_PROMPT_THEME=Single_line_Solarized
    __GIT_PROMPT_DIR="$BGP/share"
    GIT_PROMPT_THEME=Single_line
    source "$BGP/share/gitprompt.sh"
fi
unset BGP

unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# set PATH so it includes user's private bin if it exists
[ -d "$HOME/bin" ] && PATH="$HOME/bin:$PATH" || true
[ -d "$HOME/.local/bin" ] && PATH="$HOME/.local/bin:$PATH" || true

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

[ -f ~/.bash_aliases ] && . ~/.bash_aliases || true

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
[ -f /etc/bash_completion ] && ! shopt -oq posix && . /etc/bash_completion || true
BP="$(brew --prefix)"
[ -f "$BP/etc/bash_completion" ] && . "$BP/etc/bash_completion" || true
unset BP

# NVM for node.js
BPN="$(brew --prefix nvm)"
if [ -f "$BPN/nvm.sh" ]; then
  export NVM_DIR="$HOME/.nvm"
  . "$BPN/nvm.sh"
  # nvm use stable
fi
unset BPN

# pyenv
if command -v pyenv &> /dev/null; then
  export PYENV_ROOT="$HOME/.pyenv"
  PATH="$PYENV_ROOT/bin:$(pyenv root)/shims:${PATH}"
  eval "$(pyenv init -)"
fi

command -v zoxide &> /dev/null && eval "$(zoxide init bash)" || true

if command -v fzf &> /dev/null; then
  if [ -f /usr/share/doc/fzf/examples/key-bindings.bash ]; then
  	. /usr/share/doc/fzf/examples/key-bindings.bash
  	[ -f /usr/share/doc/fzf/examples/completion.bash ] && . /usr/share/doc/fzf/examples/completion.bash || true
  else
  	if [ ! -f ~/.fzf.bash ]; then
  	  FZF_INSTALL="$(brew --prefix)/opt/fzf/install"
  	  [ -f $FZF_INSTALL ] && eval "$FZF_INSTALL" || true
  	  unset FZF_INSTALL
  	fi
    [ -f ~/.fzf.bash ] && . ~/.fzf.bash || true
  fi
fi

test -e ~/.iterm2_shell_integration.bash && . ~/.iterm2_shell_integration.bash || true

[ "$SHLVL" == "1" ] && command -v neofetch &> /dev/null && neofetch || true

export EDITOR=micro
export BASH_SILENCE_DEPRECATION_WARNING=1
export GITHUB_USERNAME=uhop
