#!/usr/bin/env bash

set -o errexit -o pipefail -o nounset -o noclobber
shopt -s expand_aliases

. ~/.local/share/libs/scripts/ansi-style.sh
. ~/.local/share/libs/scripts/args.sh
. ~/.local/share/libs/scripts/args-version.sh
. ~/.local/share/libs/scripts/args-help.sh

script_dir="$(dirname "$(readlink -f "$0")")"
script_name=$(basename "$0")

args::program "$script_name" "1.0" "Jot notes keeping them in S3"
args_program_header="${BOLD}Jot${RESET_BOLD} can read and write notes as text files using S3 as a storage.
While doing so it decodes files using their extensions. For example,
${BOLD}notes.md.gz.age${RESET_BOLD} will be decrypted by ${BOLD}age${RESET_BOLD} and then decompressed by ${BOLD}gzip${RESET_BOLD}.
The resulting file ${BOLD}notes.md${RESET_BOLD} will be opened in the default editor.
After editing, the file will be compressed and encrypted back.
If the file does not exist, an empty file will be created."
args_program_footer="If no arguments are provided, ${BOLD}Jot${RESET_BOLD} will list available files.
If only one argument is provided, ${BOLD}Jot${RESET_BOLD} will edit this file.

Supported environment variables:
- ${BOLD}JOT_AWS_S3_BUCKET${RESET_BOLD}: AWS bucket name for notes
- ${BOLD}JOT_AGE_KEY${RESET_BOLD}: Age key for notes. Default: ${ITALIC}~/.ssh/age.key${RESET_ITALIC}
- ${BOLD}JOT_SSH_PUB${RESET_BOLD}: SSH public key for notes. Default: ${ITALIC}~/.ssh/id_rsa.pub${RESET_ITALIC}
- ${BOLD}JOT_SSH_PRV${RESET_BOLD}: SSH private key for notes. Default: ${ITALIC}~/.ssh/id_rsa${RESET_ITALIC}
- ${BOLD}VISUAL${RESET_BOLD}: Editor for notes
- ${BOLD}EDITOR${RESET_BOLD}: Editor for notes, used when ${BOLD}VISUAL${RESET_BOLD} is not set

Supported file extensions:
- ${BOLD}.age${RESET_BOLD}: Age encrypted file
- ${BOLD}.br${RESET_BOLD}:  Brotli compressed file
- ${BOLD}.bz2${RESET_BOLD}: Bzip2 compressed file
- ${BOLD}.gz${RESET_BOLD}:  Gzip compressed file
- ${BOLD}.xz${RESET_BOLD}:  XZ compressed file
- ${BOLD}.zst${RESET_BOLD}: Zstandard compressed file"
args_program_required_command="no"

args::option "edit, e" "Edit file" "file_name"
args::option "list, l" "List available files" "prefix"
args::option "copy, c" "Copy file to the current directory" "file_name"
args::option "save, s" "Save local file to the S3 bucket" "from_name to_name"
args::option "delete, d" "Delete file in the S3 bucket" "file_name"
args::option "rename, r" "Rename file in the S3 bucket" "from_name to_name"

args::option "-x, --exact" "Exact file name match"
args::option "-y, --yes" "Create new file without confirmation"
args::option "-n, --no" "Don't create new file"
args::option "-v, --version" "Show version"
args::option "-h, --help" "Show help"

args::parse "$@"
eval set -- "${args_cleaned}"

ERROR="$BOLD$BRIGHT_WHITE$BG_RED"

TMPDIR=$(mktemp -d)
trap 'rm -rf -- "$TMPDIR"' EXIT

if [ -z "$JOT_AWS_S3_BUCKET" ]; then
  ansi::err "${ERROR}No AWS bucket name is specified by \"${REVERSE}JOT_AWS_S3_BUCKET${RESET_REVERSE}\". Please set it to an accessible bucket for notes.${RESET_ALL}"
  exit 1
fi

ansi::out "Using AWS bucket: ${BOLD}${JOT_AWS_S3_BUCKET}${RESET_BOLD}"
ansi::out "Testing access to the bucket..."
if ! aws s3api head-bucket --bucket "$JOT_AWS_S3_BUCKET" &>/dev/null; then
  ansi::err "${ERROR}AWS bucket \"${REVERSE}$JOT_AWS_S3_BUCKET${RESET_REVERSE}\" is not accessible or does not exist. Please verify.${RESET_ALL}"
  exit 1
fi

if [ -z "${1:-}" ] || [[ "$args_command" == "list" ]]; then
  prefix="${2:-}"
  echo
  ansi::out "Listing available files:"
  echo
  aws s3 ls "s3://$JOT_AWS_S3_BUCKET/$prefix"
  if [ $? -ne 0 ]; then
    ansi::err "${ERROR}The previous command failed: make sure that the bucket ${REVERSE}${JOT_AWS_S3_BUCKET}${RESET_REVERSE} exists and accessible.${RESET_ALL}"
    exit 1
  fi
  echo
  ansi::out "Use: jot ${ITALIC}filename${RESET_ALL}"
  exit 0
fi

if [ -z "$args_command" ]; then
  args_command="edit"
else
  shift
fi

asset="${1:-}"
if [ -z "$asset" ]; then
    ansi::err "${ERROR}No file name is specified for file operations.${RESET_ALL}"
  exit 1
fi

# check if the asset exists
FOUND=yes
ansi::out "Checking access to the file..."
if ! aws s3api head-object --bucket "$JOT_AWS_S3_BUCKET" --key "$asset" &>/dev/null; then
  FOUND=no
fi

# looking for a suitable file using the asset name as a prefix
if [[ "$FOUND" == "no" ]] && ! [[ -v args_options["-x"] ]]; then
    ansi::out "Looking for a prefix ${BOLD}${asset}.${RESET_BOLD}"
    listing=$(aws s3 ls "s3://${JOT_AWS_S3_BUCKET}/${asset}" || echo "")
    set +e
    IFS=$'\n' read -r -d '' -a lines <<< "$listing"
    set -e
    unset listing
    if [[ "${#lines[@]}" -eq 1 ]]; then
      if [[ "${lines[0]}" =~ ^[^[:space:]]+[[:space:]]+[^[:space:]]+[[:space:]]+[^[:space:]]+[[:space:]]+(.+)$ ]]; then
        asset="${BASH_REMATCH[1]}"
        FOUND=yes
        ansi::out "Found file ${BOLD}${asset}${RESET_BOLD}"
      else
        ansi::err "${ERROR}Cannot parse listing of ${REVERSE}${asset}${RESET_REVERSE}.${RESET_ALL}"
        exit 1
      fi
    elif [[ "${#lines[@]}" -gt 1 ]]; then
      ansi::err "${ERROR}Multiple files found with prefix ${REVERSE}${asset}${RESET_REVERSE}. Please specify the full name or better prefix.${RESET_ALL}"
      exit 1
    fi
    unset lines
fi

# creating file if it doesn't exist
if [[ "$FOUND" == "no" ]]; then
    if [[ "$args_command" == "delete" ]] || [[ "$args_command" == "rename" ]]; then
      ansi::err "${ERROR}File ${REVERSE}$asset${RESET_REVERSE} does not exist.${RESET_ALL}"
      exit 1
    fi
    if [[ -v args_options["-n"] ]]; then
      ansi::out "File ${BOLD}$asset${RESET_BOLD} does not exist and ${BOLD}--no${RESET_BOLD} is specified."
      exit 0
    fi
    if ! [[ -v args_options["-y"] ]]; then
      echo -en "Do you want to create ${BOLD}$asset${RESET_BOLD}? [Y/n] "
      read response
      case "${response^^}" in
        N | NO | NOPE)
          ansi::out "File ${BOLD}$asset${RESET_BOLD} is not created."
          exit 0
          ;;
        Y | YES | YEP | YEAH | '')
          ;;
        *)
          ansi::err "${ERROR}Invalid response: ${REVERSE}${response}${RESET_REVERSE}${RESET_ALL}"
          exit 1
          ;;
      esac
    fi
fi

AGE_KEY=${JOT_AGE_KEY:-~/.ssh/age.key}
SSH_PUB=${JOT_SSH_PUB:-~/.ssh/id_rsa.pub}
SSH_PRV=${JOT_SSH_PRV:-~/.ssh/id_rsa}

do_command() {
  local command="$1"
  local file_ext="$2"
  local file_short="${3:-}"
  local file_long="$file_short"."$2"

  if [[ "$FOUND" == "no" ]] && [[ "$command" == "d" ]]; then
    rm "$TMPDIR/$file_long"
    touch "$TMPDIR/$file_short"
    return 0
  fi

  case "$file_ext" in
    "age")
      if [[ "$command" == "d" ]]; then
        # decode
        if [ -f "$AGE_KEY" ]; then
          ansi::out "Decrypting with age key..."
          age --decrypt -i "$AGE_KEY" -o "$TMPDIR/$file_short" "$TMPDIR/$file_long"
          rm "$TMPDIR/$file_long"
        elif [ -f "$SSH_PRV" ]; then
          ansi::out "Decrypting with ssh private key..."
          age --decrypt -i "$SSH_PRV" -o "$TMPDIR/$file_short" "$TMPDIR/$file_long"
          rm "$TMPDIR/$file_long"
        else
          ansi::err "${ERROR}Keys not found: ${REVERSE}${AGE_KEY}${RESET_REVERSE}, ${REVERSE}${SSH_PRV}${RESET_REVERSE}${RESET_ALL}"
          return 1
        fi
      elif [[ "$command" == "e" ]]; then
        # encode
        if [ -f "$AGE_KEY" ]; then
          ansi::out "Encrypting with age key..."
          age --encrypt -i "$AGE_KEY" -o "$TMPDIR/$file_long" "$TMPDIR/$file_short"
          rm "$TMPDIR/$file_short"
        elif [ -f "$SSH_PUB" ]; then
          ansi::out "Encrypting with ssh public key..."
          age --encrypt -R "$SSH_PUB" -o "$TMPDIR/$file_long" "$TMPDIR/$file_short"
          rm "$TMPDIR/$file_short"
        else
          ansi::err "${ERROR}Keys not found: ${REVERSE}${AGE_KEY}${RESET_REVERSE}, ${REVERSE}${SSH_PUB}${RESET_REVERSE}${RESET_ALL}"
          return 1
        fi
      fi
      ;;
    "br")
      if [[ "$command" == "d" ]]; then
        # decode
        ansi::out "Decoding with brotli..."
        brotli -d --rm "$TMPDIR/$file_long"
      elif [[ "$command" == "e" ]]; then
        # encode
        ansi::out "Encoding with brotli..."
        brotli -Z --rm "$TMPDIR/$file_short"
      fi
      ;;
    "bz2")
      if [[ "$command" == "d" ]]; then
        # decode
        ansi::out "Decoding with bunzip2..."
        bunzip2 "$TMPDIR/$file_long"
      elif [[ "$command" == "e" ]]; then
        # encode
        ansi::out "Encoding with bzip2..."
        bzip2 -z --best "$TMPDIR/$file_short"
      fi
      ;;
    "gz")
      if [[ "$command" == "d" ]]; then
        # decode
        ansi::out "Decoding with gunzip..."
        gunzip "$TMPDIR/$file_long"
      elif [[ "$command" == "e" ]]; then
        # encode
        ansi::out "Encoding with gzip..."
        gzip -9 "$TMPDIR/$file_short"
      fi
      ;;
    "xz")
      if [[ "$command" == "d" ]]; then
        # decode
        ansi::out "Decoding with xz..."
        xz -d "$TMPDIR/$file_long"
      elif [[ "$command" == "e" ]]; then
        # encode
        ansi::out "Encoding with xz..."
        xz -z -e -9 "$TMPDIR/$file_short"
      fi
      ;;
    "zst")
      if [[ "$command" == "d" ]]; then
        # decode
        ansi::out "Decoding with zstd..."
        unzstd --rm "$TMPDIR/$file_long"
      elif [[ "$command" == "e" ]]; then
        # encode
        ansi::out "Encoding with zstd..."
        zstd --ultra --rm "$TMPDIR/$file_short"
      fi
      ;;
    *)
      return 1
      ;;
  esac
  return 0
}

# delete/rename operations

if [[ "$args_command" == "delete" ]]; then
  ansi::out "Deleting ${BOLD}${asset}${RESET_BOLD} from S3..."
  aws s3 rm "s3://$JOT_AWS_S3_BUCKET/$asset" --quiet
  exit 0
fi

if [[ "$args_command" == "rename" ]]; then
  new_name="${2:-}"
  if [ -z "$new_name" ]; then
    ansi::err "${ERROR}No new name provided.${RESET_ALL}"
    exit 1
  fi
  ansi::out "Renaming ${BOLD}${asset}${RESET_BOLD} to ${BOLD}${new_name}${RESET_BOLD}..."
  aws s3 mv "s3://$JOT_AWS_S3_BUCKET/$asset" "s3://$JOT_AWS_S3_BUCKET/$new_name" --quiet
  exit 0
fi

# download the asset
if [[ "$FOUND" == "yes" ]]; then
  ansi::out "Downloading ${BOLD}${asset}${RESET_BOLD} from S3..."
  aws s3 cp "s3://$JOT_AWS_S3_BUCKET/$asset" "$TMPDIR/$asset" --quiet
else
  touch "$TMPDIR/$asset"
fi

file_name="$asset"
extensions=()

# decode the asset
while true; do
  file_ext="${file_name##*.}"
  file_short="${file_name%.*}"
  if ! do_command t "$file_ext"; then
    break
  fi
  do_command d "$file_ext" "$file_short"
  file_name="$file_short"
  extensions+=("$file_ext")
done

# copy/save operations

if [[ "$args_command" == "copy" ]]; then
  local_file_name=$(basename "$TMPDIR/$file_name")
  ansi::out "Copying ${BOLD}${asset}${RESET_BOLD} to ${BOLD}${local_file_name}${RESET_BOLD}..."
  cp -iv "$TMPDIR/$file_name" "${local_file_name}"
  exit 0
fi

if [[ "$args_command" == "save" ]]; then
  args::err "Not implemented yet"
  exit 1
fi

# edit the file

editor="${VISUAL:-$EDITOR}"

ansi::out "Opening ${BOLD}${asset}${RESET_BOLD} in ${BOLD}${editor}${RESET_BOLD}..."
cp "$TMPDIR/$file_name" "$TMPDIR/${file_name}.bak"
"$editor" "$TMPDIR/$file_name"
if cmp -s "$TMPDIR/${file_name}.bak" "$TMPDIR/$file_name"; then
  ansi::out "No changes detected: skipping saving."
  exit 0
fi

# encode the file

# Get the index of the last element
last_index=$(( ${#extensions[@]} - 1 ))

# Iterate from the last index down to 0
for (( i = $last_index; i >= 0; --i )); do
  do_command e "${extensions[$i]}" "$file_name"
  file_name+=".${extensions[$i]}"
done

# upload the asset
ansi::out "Uploading ${BOLD}${asset}${RESET_BOLD} to S3..."
aws s3 cp "$TMPDIR/$asset" "s3://$JOT_AWS_S3_BUCKET/$asset" --quiet
